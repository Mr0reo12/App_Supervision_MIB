name: CI + CD Pipeline (build → Docker Hub → deploy)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-dockerfiles:
    runs-on: [self-hosted, Linux, X64]
    strategy:
      matrix:
        file:
          - api-gateway/Dockerfile
          - backend/Dockerfile
          - frontend/Dockerfile
    steps:
      - uses: actions/checkout@v4
      - name: Hadolint ${{ matrix.file }}
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.file }}

  lint-python:
    runs-on: [self-hosted, Linux, X64]
    needs: lint-dockerfiles
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - run: |
          pip install flake8
          flake8 backend/ api-gateway/ frontend/

  tests:
    runs-on: [self-hosted, Linux, X64]
    needs: lint-python
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          pip install pytest
          pip install -r backend/requirements.txt || true
          pip install -r frontend/requirements.txt || true
          pip install -r api-gateway/requirements.txt || true
      - name: Run Unit Tests
        run: |
          export PYTHONPATH=$(pwd)
          pytest --import-mode=importlib tests/unit \

      - name: Run Integration Tests
        run: |
          export PYTHONPATH=$(pwd)
          pytest --import-mode=importlib tests/integration 

  build-images:
     runs-on: [self-hosted, Linux, X64]
     needs: [lint-dockerfiles, lint-python, tests]
     steps:
       - uses: actions/checkout@v4

       - name: Login a Docker Hub
         uses: docker/login-action@v2
         with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

       - name: Build & Push API Gateway
         uses: docker/build-push-action@v5
         with:
          context: ./api-gateway
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:gateway-dev

       - name: Build & Push Backend
         uses: docker/build-push-action@v5
         with:
          context: ./backend
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:backend-dev

       - name: Build & Push Frontend
         uses: docker/build-push-action@v5
         with:
          context: ./frontend
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:frontend-dev

  deploy-to-dev:
    runs-on: [self-hosted, Linux, X64]
    needs: build-images
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubeconfig
        run: |
          sudo mkdir -p /home/actions/.kube
          sudo cp /root/.kube/config /home/actions/.kube/config
          sudo chown -R actions:actions /home/actions/.kube
      - name: Deploy Dev
        run: |
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config apply -f infra/k8s/dev
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-backend -n dev
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-frontend -n dev
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-gateway -n dev
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config get pods -n dev

  security-scan:
   runs-on: [self-hosted, Linux, X64]
   needs: build-images
   steps:
    - uses: actions/checkout@v4
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo tee /etc/apt/trusted.gpg.d/trivy.gpg
        echo deb https://aquasecurity.github.io/trivy-repo/deb stable main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Security Scan
      run: |
        trivy image ${{ secrets.DOCKERHUB_USER }}/app_supervision:backend-dev
        trivy image ${{ secrets.DOCKERHUB_USER }}/app_supervision:gateway-dev
        trivy image ${{ secrets.DOCKERHUB_USER }}/app_supervision:frontend-dev
 
  deploy-to-prod:
    runs-on: [self-hosted, Linux, X64]
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      - name: Deploy producción
        run: |
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config apply -f infra/k8s/prod
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config get pods -n prod
