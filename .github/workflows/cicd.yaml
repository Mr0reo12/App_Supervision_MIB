name: CI + CD Pipeline (build → Docker Hub → deploy)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-dockerfiles:
    runs-on: [self-hosted, Linux, X64]
    strategy:
      matrix:
        file:
          - api-gateway/Dockerfile
          - backend/Dockerfile
          - frontend/Dockerfile
    steps:
      - uses: actions/checkout@v4
      - name: Hadolint ${{ matrix.file }}
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.file }}

  lint-python:
    runs-on: [self-hosted, Linux, X64]
    needs: lint-dockerfiles
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - run: |
          pip install flake8
          flake8 backend/ api-gateway/ frontend/

  build-images:
    runs-on: [self-hosted, Linux, X64]
    needs: [lint-dockerfiles, lint-python]
    steps:
      - uses: actions/checkout@v4

      - name: Login a Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:gateway-dev

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:backend-dev

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:frontend-dev

  deploy-to-k8s:
    name: Deploy to Dev Environment
    runs-on: [self-hosted, Linux, X64]
    needs: build-images
    steps:
      - uses: actions/checkout@v4

      - name: Copiar kubeconfig al usuario actions
        run: |
          sudo mkdir -p /home/actions/.kube
          sudo cp /root/.kube/config /home/actions/.kube/config
          sudo chown -R actions:actions /home/actions/.kube

      - name: Ver pods en 'dev' antes del deploy
        run: sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config get pods -n dev || echo "Error obteniendo pods"

      - name: Deploy a K3S
        run: |
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config apply -f infra/k8s/dev
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-backend -n dev --timeout=180s
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-frontend -n dev --timeout=180s
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-gateway -n dev --timeout=180s

      - name: Ver pods en 'dev' después del deploy
        run: sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config get pods -n dev

  run-tests:
    name: Unit & Integration Tests
    runs-on: [self-hosted, Linux, X64]
    needs: deploy-to-k8s
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Instalar dependencias y ejecutar pytest
        run: |
          pip install -r backend/requirements.txt
          pip install pytest
          pytest backend/tests/

  scan-with-trivy:
    name: Security Scan with Trivy
    runs-on: [self-hosted, Linux, X64]
    needs: run-tests
    steps:
      - name: Instalar Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

      - name: Escanear imágenes
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL docker.io/angelo321lagomarsino123699/app_supervision:backend-dev
          trivy image --exit-code 1 --severity HIGH,CRITICAL docker.io/angelo321lagomarsino123699/app_supervision:frontend-dev
          trivy image --exit-code 1 --severity HIGH,CRITICAL docker.io/angelo321lagomarsino123699/app_supervision:gateway-dev

  load-test:
    name: Load Testing with Locust
    runs-on: [self-hosted, Linux, X64]
    needs: scan-with-trivy
    steps:
      - uses: actions/checkout@v4
      - name: Instalar y correr locust
        run: |
          pip install locust
          locust -f tests/load/locustfile.py --headless -u 50 -r 5 -t 1m --host http://your-dev-url

  deploy-to-prod:
    name: Deploy to Production
    runs-on: [self-hosted, Linux, X64]
    needs: load-test
    steps:
      - uses: actions/checkout@v4

      - name: Copiar kubeconfig al usuario actions
        run: |
          sudo mkdir -p /home/actions/.kube
          sudo cp /root/.kube/config /home/actions/.kube/config
          sudo chown -R actions:actions /home/actions/.kube

      - name: Deploy a Producción
        run: |
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config apply -f infra/k8s/prod
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-backend -n production --timeout=180s
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-frontend -n production --timeout=180s
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-gateway -n production --timeout=180s
