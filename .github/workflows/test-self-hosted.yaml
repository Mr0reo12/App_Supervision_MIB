name: CI + CD Pipeline (build → Docker Hub → deploy)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-dockerfiles:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        file:
          - api-gateway/Dockerfile
          - backend/Dockerfile
          - frontend/Dockerfile
    steps:
      - uses: actions/checkout@v4
      - name: Hadolint ${{ matrix.file }}
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.file }}

  lint-python:
    runs-on: ubuntu-latest
    needs: lint-dockerfiles
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Lint with Ruff
        continue-on-error: true
        run: |
          pip install ruff==0.4.*
          ruff .

  build-images:
    runs-on: ubuntu-latest
    needs: [lint-dockerfiles, lint-python]
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:gateway-dev

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:backend-dev

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: docker.io/angelo321lagomarsino123699/app_supervision:frontend-dev

  deploy-to-k8s:
     name: Deploy to Dev Environment
     runs-on: [self-hosted, Linux, X64]
     needs: build-images
     steps:
      - uses: actions/checkout@v4

      - name: Copiar kubeconfig al usuario actions
        run: |
          sudo mkdir -p /home/actions/.kube
          sudo cp /root/.kube/config /home/actions/.kube/config
          sudo chown -R actions:actions /home/actions/.kube

      - name: Listar contextos disponibles en el kubeconfig
        run: |
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config config get-contexts -o name

      - name: Listar pods en namespace 'dev'
        run: |
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config get pods -n dev

      - name: Aplicar manifiestos en Dev
        run: |
          kubectl --kubeconfig=/home/actions/.kube/config apply -f infra/k8s/dev

      - name: Esperar rollout de backend
        run: |
          kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-backend -n dev --timeout=180s || true

      - name: Esperar rollout de frontend
        run: |
          kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-frontend -n dev --timeout=180s || true

      - name: Esperar rollout de gateway
        run: |
          kubectl --kubeconfig=/home/actions/.kube/config rollout status deployment/app-supervision-gateway -n dev --timeout=180s || true

      - name: Verificar pods al final
        run: |
          sudo -u actions kubectl --kubeconfig=/home/actions/.kube/config get pods -n dev
